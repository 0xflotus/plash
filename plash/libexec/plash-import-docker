#!/usr/bin/env python3
#
# usage: plash import-docker CONTAINER
# Import an image from the docker cloud

import atexit
import os
import shutil
import subprocess
import sys
import tempfile
from os.path import join
from time import sleep

from plash.utils import catch_and_die, die, die_with_usage, handle_help_flag

DOCKER_START_TIMEOUT = 40

handle_help_flag()

try:
    pull = sys.argv[1]
except IndexError:
    die_with_usage()


def debug(msg):
    print('==> {}'.format(msg), file=sys.stderr)


tmpdir = tempfile.mkdtemp(prefix='plash-import-docker-')
socket_file = join(tmpdir, 'docker.sock')
os.environ['PLASH_DOCKER_SOCKET'] = socket_file
daemon_log = open(join(tmpdir, 'docker-daemon.log'), 'w')
client_log = open(join(tmpdir, 'docker.log'), 'w')

#
# build daemon if not done yet
#
debug('ensuring docker is builded')
buildfile = shutil.which('plash-docker-daemon')
with catch_and_die([subprocess.CalledProcessError], silent=True):
    subprocess.check_output(['plash-build', '--eval-file', buildfile])

#
# start daemon and wait for it to start
#
debug('starting docker')
p = subprocess.Popen(['plash-docker-daemon'], stderr=2, stdout=2)
atexit.register(lambda: p.kill())
c = 0
while True:

    # check if daemon looks ok
    daemon_exit = p.poll()
    if c >= DOCKER_START_TIMEOUT:
        die('timeout for docker start: server log: {}, client log: {}'.format(
            daemon_log.name, client_log.name))
    if daemon_exit is not None:
        die('`plash-docker-daemon` died with exit status {} (logs at {})'.
            format(daemon_exit, daemon_log.name))

    # check if daemon is up yet
    try:
        subprocess.check_call(
            ['plash-docker', 'info'], stderr=client_log, stdout=client_log)
    except subprocess.CalledProcessError:
        sleep(1)
        c += 1
    else:
        break

debug('docker is up')
debug('pulling image')
# docker pull shows progress in stdout by default, we must redirect it too stderr
subprocess.check_call(['plash-docker', 'pull', pull], stdout=2)
debug('pulled')
debug('exporting image into plash')

with catch_and_die([subprocess.CalledProcessError], silent=True):
    container = subprocess.check_output(['plash-docker', 'create', pull,
                                         'sh']).decode().rstrip('\n')
    docker_export = subprocess.Popen(
        ['plash-docker', 'export', container], stdout=subprocess.PIPE)
    atexit.register(lambda: docker_export.kill())
    subprocess.check_call(
        ['plash-import-tar'], stdin=docker_export.stdout)
