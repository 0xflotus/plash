#!/usr/bin/env python3
#
# usage: plash import-tar TARFILE
# Create a container from a tar file.
# Tar file can be '-' to read the file from stdin

import os
import sys
import tarfile
from os.path import join
from subprocess import CalledProcessError, check_call
from tempfile import mkdtemp

from plash.unshare import unshare_if_user
from plash.utils import (assert_initialized, catch_and_die, die,
                         die_with_usage, get_plash_data, handle_help_flag)

handle_help_flag()
assert_initialized()

try:
    tar_file = sys.argv[1]
except IndexError:
    die_with_usage()


class PlashTarFile(tarfile.TarFile):
    def makedev(self, tarinfo, targetpath):
        try:
            tarfile.TarFile.makedev(self, tarinfo, targetpath)
        except OSError as exc:
            print(
                'plash: import-tar: ignoring dev file: {} ({})'.format(tarinfo.path,
                                                    exc.strerror),
                file=sys.stderr)


rootfs = mkdtemp(dir=join(get_plash_data(), 'tmp'))

with catch_and_die([tarfile.TarError], debug_class=True):
    with catch_and_die([OSError]):
        if tar_file == '-':
            t = PlashTarFile.open(fileobj=sys.stdin.buffer, mode='r|')
        else:
            t = PlashTarFile.open(tar_file)

unshare_if_user()
t.extractall(rootfs)

# we want /etc/resolv to not by a symlink or not to not exist - that makes the later mount not work #FIXME: add a layer for that
resolvconf = join(rootfs, 'etc/resolv.conf')
try:
    os.unlink(resolvconf)
except FileNotFoundError:
    pass
with open(resolvconf, 'w') as f:
    f.seek(0)
    f.truncate()

with catch_and_die([CalledProcessError], silent=True):
    check_call(['plash-add-layer', '0', rootfs])
