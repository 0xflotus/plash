#!/usr/bin/env python3

import argparse
import hashlib
import logging
import os
import platform
import shlex
import stat
import subprocess
import sys
import uuid
from base64 import b64encode
from collections import OrderedDict, namedtuple
from contextlib import contextmanager
from os import environ, path
from os.path import expanduser
from urllib.parse import urlparse

import yaml

from plash.actions.base import actions as ACTIONS
import plash.actions.core

from plash.distros.base import distros as DISTROS
import plash.distros.core

home_directory = expanduser("~")
script_dir = os.path.dirname(os.path.realpath(__file__))

assert False, actions

class BuildError(Exception):
    pass


class DockerBuildable:

    def get_image_name(self):
        h = hashstr('{}-{}'.format(
            self.get_base_image_name(), self.get_build_commands()).encode())
        return 'packy-{}'.format(h)

    def get_base_image_name(self):
        raise NotImplementedError('you lazy person')

    def get_build_commands(self):
        raise NotImplementedError('you lazy person')

    def image_exists(self, ref):
        # return False
        out = subprocess.check_output(
            ["docker", "images", "--quiet", "--filter",
             "reference={ref}".format(ref=ref)])
        return bool(out)
    
    def ensure_builded(self, quiet=False):
        if not self.image_exists(self.get_image_name()):
            self.build(quiet)

    def build(self, quiet=True):
        rand_name = rand()
        cmds = self.get_build_commands()
        new_image_name = self.get_image_name()

        quiet_kw = {'stderr': subprocess.DEVNULL, 'stdout': subprocess.DEVNULL}
        exit = subprocess.Popen([
            'docker',
            'run',
            '-ti',
            # '-v', '/Users/iraehueckcosta/.aptcache:/var/cache/apt/archives', # cache apt packages -- implement that later!
            '-v', '/:/.host_fs_do_not_use', # cache apt packages -- implement that later!
            '--net=host', # does not bind the port on mac
            '--privileged',
            '--cap-add=ALL',
            '-v', '/dev:/dev',
            '-v', '/lib/modules:/lib/modules',
            '--name',
            rand_name, self.get_base_image_name(),
            # 'bash', '-cx', cmds], # with bash debug script
            'bash', '-c', cmds],
        **(quiet_kw if quiet else {})).wait()
        if not exit == 0:
            raise BuildError('building returned exit status {}'.format(exit))

        # get cotnainer id
        container_id = subprocess.check_output(
        ['docker', 'ps', '--all', '--quiet', '--filter', 'name={}'.format(rand_name)])

        container_id, = container_id.splitlines()

        # create image out of the container
        from time import sleep
        sleep(0.2) # race condition in docker?
        exit = subprocess.Popen(['docker', 'commit', container_id, new_image_name], **quiet_kw).wait()
        assert exit == 0

        # remove the container to save space
        exit = subprocess.Popen(['docker', 'rm', container_id], **quiet_kw).wait()
        assert exit == 0


class PackageImage(DockerBuildable):

    def __init__(self, os_obj, cmds):
        self.os_obj = os_obj
        self.cmds = cmds

    @property
    def short_name(self):
        return self.name[0]

    @property
    def name(self):
        return self.__class__.__name__.lower()

    def get_base_image_name(self):
        return self.os_obj.get_image_name()

    def get_build_commands(self):
        return self.cmds

    def build_all(self, quiet=False):
        self.os_obj.build(quiet)
        self.build(quiet)

    def ensure_builded_all(self, quiet=False):
        self.os_obj.ensure_builded(quiet)
        self.ensure_builded(quiet)

    def run(self, cmd_with_args, extra_envs={}):

        args = [
            'docker',
            'run',
            '-ti',
            '--net=host', # does not bind the port on mac
            '--privileged',
            '--cap-add=ALL',
            '--workdir', os.getcwd(),
            '-v', '/dev:/dev',
            '-v', '/lib/modules:/lib/modules',
            '-v', '{}:{}'.format(home_directory, home_directory),
            '--rm',
            self.get_image_name(),
        ] + list(cmd_with_args)

        for env, env_val in dict(environ, **extra_envs).items():
            if env not in ['PATH']: # blacklist more envs
                args.insert(2, '-e')
                args.insert(3, '{}={}'.format(env, shlex.quote(env_val)))  # SECURITY: is shlex.quote safe?

        return subprocess.Popen(args).wait()


class OrderAction(argparse.Action):
    def __call__(self, parser, namespace, values, option_string=None):
        if not 'ordered_args' in namespace:
            setattr(namespace, 'ordered_args', [])
        previous = namespace.ordered_args
        previous.append((self.dest, values))
        setattr(namespace, 'ordered_args', previous)

def main():
    HELP = 'my help'
    PROG = 'plash'
    parser = argparse.ArgumentParser(
        formatter_class=argparse.RawTextHelpFormatter,
        description='Run programm from any Linux',
        prog=PROG,
        epilog=HELP)


    parser.add_argument("--quiet", action='store_true')
    parser.add_argument("--noop", action='store_true')

    parser.add_argument(
        "exec", type=str, nargs='*', default=['bash'], help='What to execute in container')

    for pm in ACTIONS.values():

        args = ["--{}".format(pm.name)]
        short_name = getattr(pm, 'short_name', None)
        if short_name:
            args.insert(0, "-{}".format(pm.short_name))

        parser.add_argument(*args, type=str, nargs="+", help='install with {}'.format(pm.name), action=OrderAction)

    
    for os in sorted(DISTROS, key=lambda o: o.name):
        parser.add_argument('-{}'.format(os.short_name), '--{}'.format(os.name), dest='os', action='append_const', const=os)

    parser.add_argument("--rebuild", default=False, action='store_true')
    parser.add_argument("--install", default=False)


    prog_args = sys.argv[1:]
    if len(prog_args) >= 1 and not prog_args[0].startswith('-'):
        prog_args = ['--ubuntu', '--apt-from-command', prog_args[0], '--'] + prog_args
    args = parser.parse_args(prog_args)

    if not args.os:
        parser.error('specify at least on operating system')
    elif len(args.os) > 1:
        parser.error('specify only one operating system')

    # if args.install is False:
    #     install = False
    # elif not len(args.install):
    #     # default value
    #     install = '/usr/local/bin/{}'.format(args.exec[0])
    # elif len(args.install) == 1:
    #     install = args.install[0]
    # else:
    #     parser.error('--install needs one or no argument')

    build_cmds = []
    for name, values in getattr(args, 'ordered_args', []):

        # argparse makes this conversion
        name = name.replace('_', '-')

        sm = ACTIONS[name]

        build_cmds.append(sm.friendly_call(*values))

    build_cmds = ' && '.join(build_cmds)
    
    pi = PackageImage(args.os[0], build_cmds)

    with friendly_exception([BuildError]):
        if not args.rebuild:
            pi.ensure_builded_all(quiet=args.quiet)
        else:
            pi.build_all(quiet=args.quiet)


    if not args.install:
        if not args.noop:
            exit = pi.run(args.exec)
            sys.exit(exit)

    else:
        install_to = args.install
        argv = sys.argv[1:]
        install_index =  argv.index('--install')
        argv.pop(install_index)
        argv.pop(install_index)
        run_script = '#!/bin/sh\nplash {} "$@"\n'.format(' '.join(argv))
        with friendly_exception([IOError], 'install'):
            create_executable_file(install_to, run_script)
        print('Installed to {}'.format(install_to))
    # print(args)


if __name__ == '__main__':
    # with friendly_exception(FileNotFoundError, IOError):
        main()
