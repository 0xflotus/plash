           ████                          ██       
           ████                          ██       
             ██                          ██       
 ██░███▒     ██       ▒████▓    ▒█████░  ██░████  
 ███████▒    ██       ██████▓  ████████  ███████▓ 
 ███  ███    ██       █▒  ▒██  ██▒  ░▒█  ███  ▒██ 
 ██░  ░██    ██        ▒█████  █████▓░   ██    ██ 
 ██    ██    ██      ░███████  ░██████▒  ██    ██ 
 ██░  ░██    ██      ██▓░  ██     ░▒▓██  ██    ██ 
 ███  ███    ██▒     ██▒  ███  █▒░  ▒██  ██    ██ 
 ███████▒    █████   ████████  ████████  ██    ██ 
 ██░███▒     ░████    ▓███░██  ░▓████▓   ██    ██ 
 ██                                               
 ██                                               
 ██                                               
   
ｃｏｎｔａｉｎｅｒｉｚｅｄ  Ｐｒｏｃｅｓｓｅｓ


###
# Why plash?
###

- Security: plash containers run completely in user space.

- portability: Plash runs inside CI environments or inside other container software
  like docker.

- Integration: Processes are containerized but not isolated from the host
  operating system.

- Plashfiles: Plashfiles are executable build files featuring an extendable
  lightweight configuration management language.


###
# Getting started
###

$ pip3 install plash
$ plash --from alpine --apk xeyes -- xeyes
$ plash --from-github ihucos/python --pip3 dotfiles -- dotfiles --sync
$ plash --help


###
# Examples
###

https://github.com/ihucos/noapt                        Use ubuntu packages in other Linux distributions
https://github.com/ihucos/plash-travis-example         Run plash in travis CI
https://github.com/ihucos/plash-python-example/        Example of OS-Level isolation of python packages
https://github.com/ihucos/plash/blob/master/.travis    A Plashfile that runs plash's unit tests and deployments


###
# Plashfiles
###

Plashfiles are executable build files and may have many use cases. For example
packaging scripts or bigger programs in a portable way. The following plash
script for example will run a sample application.

#!/usr/bin/env plash-exec
--from archlinux
--pacman gtk3 python-gobject
--layer
--entrypoint-script 
#!/usr/bin/env python
import gi
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk
Gtk.init(None)
Hello = Gtk.MessageDialog(message_type=Gtk.MessageType.INFO,
                          buttons=Gtk.ButtonsType.OK,
                          text="Hello world!",
                          secondary_text="This is running inside a plash container.")
Hello.run()
<---end script--->

###
# Development Guidelines
###

- Keep the script character.
- Don't fall in love with the code, embrace its absence.
- All dependencies will get unmaintained at some point.
- Use honest thin wrappers, documented leaky abstractions are better then difficult promises.
- Don't be a monolith but don't try too hard not to be one.
- Only be as smart as necessary and keep it simple and stupid (KISS).
- Do it or don't do it, but never complain or warn via stderr.
- Still be able to run this in five years without any maintenance work.
- Find out what this program is and especially what it not is.
- Say no to features, say yes to solved used cases.
- Postpone compromises.
- Be as vanilla as you can be
- Be humble, don't oversell your abstraction layer.
- Work toward a timeless, finished product that will require no maintainance.
- The right guidelines for the right situation.
