#!/usr/bin/env python3

from subprocess import check_output
import os
from os import path
import jinja2

DOCOUT_DIR = path.join(path.dirname(path.dirname(path.abspath(__file__))), 'docs')
TEMPL_DIR = path.join(path.dirname(path.dirname(path.abspath(__file__))), 'docs_templates')
BIN_DIR = path.join(path.dirname(DOCOUT_DIR), 'plashlib/libexec')

def render(tpl_path, **context):
    path, filename = os.path.split(tpl_path)
    return jinja2.Environment(
        loader=jinja2.FileSystemLoader(TEMPL_DIR)).get_template(filename).render(context)

out = check_output(['plash', 'list'])
out = out.decode()
progs = sorted((i.split(None, 2)[1:] for i in out.splitlines()))

with open(path.join(DOCOUT_DIR, 'index.html'), 'w') as f:
    f.write(render('index.html', progs=progs))

filedocs = []
binfiles = [i for i in os.listdir(BIN_DIR) if not i.startswith('.')]
for binfile in binfiles:
    if binfile.startswith('.'):
        continue
    fname = path.join(BIN_DIR, binfile)
    with open(fname) as f:
        read = f.read()
    lines = read.splitlines()

    # get doc out of source code
    doc = []
    lines.pop(0)
    lines.pop(0)
    while lines:
        line = lines.pop(0)
        if not line.startswith('#'):
            break
        doc.append(line[2:])
    subcommand = binfile.split('-', 1)[1]
    filedocs.append({'code': read, 'doc': '\n'.join(doc), 'prog': subcommand})

for item in filedocs:
    with open(path.join(DOCOUT_DIR, item['prog'] + '.html'), 'w') as f:
        f.write(render('command.html', **item))
