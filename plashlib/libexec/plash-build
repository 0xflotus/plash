#!/usr/bin/env python3
#
# usage: plash build <ACTIONS>
# Builds a container. Any command line options is interpreted as action,
# Use `--list` to list all available action.
#
# exit status:
# 1: Generic error code
# 2: Unrecognized arguments
# 3: Returning container from cache, not building
# 4: Build error - building returned non-zero exit status
#
#
# Examples:
#
# $ plash build -i ubuntu --run 'touch a'
# --> touch a
# --:
# 66
#
# $ plash build -i ubuntu --run 'touch a' --layer --run 'touch b'
# --> touch b
# --:
# 67
#
# $ plash build -i ubuntu --apt nmap
# --> apt-get update
# Hit:1 http://security.ubuntu.com/ubuntu bionic-security InRelease
# Get:2 http://archive.ubuntu.com/ubuntu bionic InRelease [235 kB]
# <snip>
# Setting up nmap (7.60-1ubuntu2) ...
# Processing triggers for libc-bin (2.26-0ubuntu2) ...
# --:
# 68

import re
import subprocess
import os
import sys
from plashlib.utils import hashstr, nodepath_or_die
from plashlib import ux
from subprocess import (DEVNULL, CalledProcessError, Popen, check_output, PIPE)

from plashlib.eval import hint, get_hint_values
from plashlib.utils import catch_and_die, die, info, color, handle_help_flag, plash_map

handle_help_flag()
ux.assert_initialized()

# proxy stdin and argv to plash-eval to generate the build script 
with catch_and_die([CalledProcessError], silent=True):
    script = subprocess.run(
        ['plash-eval'] + sys.argv[1:],
        stdin=sys.stdin,
        check=True,
        stdout=subprocess.PIPE).stdout

with catch_and_die([CalledProcessError], silent=True):
    script = subprocess.run(
        ['plash-create-layered'],
        input=script,
        check=True)
