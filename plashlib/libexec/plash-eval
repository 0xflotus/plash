#!/usr/bin/env python3
#
# usage: plash eval
# Prints build script. It prints the shell script generated from actions passed in stdin.
# plash build passes its arguments to this script to generate the shell script
# with the build instructions.

import sys

from plashlib import eval, stdlib
from plashlib.utils import catch_and_die, die, handle_help_flag
from itertools import dropwhile

handle_help_flag()

tokens = sys.argv[1:]
if not tokens:
    tokens = [line.rstrip('\n') for line in sys.stdin.readlines()]

# little magic: remove the first lines starting with comments
tokens = dropwhile(lambda l: l.startswith('#'), tokens)

lsp = []
for token in tokens:
    if token == '--':
        die('invalid option: --')
    elif token.startswith('--'):
        lsp.append([token[2:]])
    elif token.startswith('-') and not token == '-':
        for single_letter_opt in token[1:]:
            lsp.append([single_letter_opt])
    elif token:
        try:
            lsp[-1].append(token)
        except IndexError:
            die('parse: first token must be an action prefixed by two dashes (got {})'.format(repr(token)))

with catch_and_die([eval.ActionNotFoundError, eval.ActionTracebackError]):
    script = eval.eval(lsp)
if script and not script.endswith('\n'):
    script += '\n'  # that '\n' is right
print(script, end='')
