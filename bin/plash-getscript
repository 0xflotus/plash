#!/usr/bin/env python3
#
# usage: plash-getscript <ACTIONS>
# Prints build script. It prints the shell script generated from actions passed
# as command line parameters.  Call with --help to see available actions.
# plash-build passes its arguments to this script to generate the shell script
# with the build instruction.

import argparse
from inspect import signature
import sys

from plashlib import eval, stdlib
from plashlib.utils import catch_and_die, deescalate_sudo, die

# try not to be root
deescalate_sudo()


def create_collect_lsp_action(lsp_begin):
    class CollectLspAction(argparse.Action):
        def __call__(self, parser, namespace, values, option_string=None):
            if not 'lsp' in namespace:
                setattr(namespace, 'lsp', [])
            previous = namespace.lsp
            previous.extend([
                i if not c + 1 == len(lsp_begin) else (i + list(values))
                for c, i in enumerate(lsp_begin)
            ])
            setattr(namespace, 'lsp', previous)

    return CollectLspAction

helps = []
def print_help():
    maxlen = max(len(i[0]) for i in helps)
    for command, descr in helps:
        print(command)
        print(descr)
        print()
        #descr = descr or ''
        #print('{} {}'.format(command, descr.rjust(12)))

class PlashHelpFormatter(argparse.HelpFormatter):
    #def _format_args(self, *args, **kwargs):
    def _format_args(self, action, default_metavar):
        return ''
        return str(action.nargs)

parser = argparse.ArgumentParser(formatter_class=PlashHelpFormatter, usage='plash-getscript <ARGS>')
parser.error = die
#parser.print_help = print_help


group = parser.add_argument_group('actions')
for action, func in eval.state['actions'].items():
    # TODO: find out how many arguments it takes and pass it

    # find out how many arguments the function takes
    sig = signature(func)
    arg_kinds = ([str(i.kind) for i in sig.parameters.values()])
    if 'KEYWORD_ONLY' in arg_kinds or 'VAR_KEYWORD' in arg_kinds:
        die('action may not accept keyword arguments: {}{}'.format(
            func.__name__, sig))
    if 'VAR_POSITIONAL' in arg_kinds:
        num = '*'
    else:
        num = len(arg_kinds)

    helps.append((action, func.__doc__))
    group.add_argument(
        '--' + action,
        dest='a',
        help=func.__doc__,
        action=create_collect_lsp_action([[action]]),
        nargs=num)

# add the cli shortucuts
group = parser.add_argument_group('macros')
for shortcut, lsp, nargs in stdlib.CLI_SHORTCUTS:
    help = 'macro for: `{} <ARGS>`'.format(' '.join(
        '--{}'.format(' '.join(i)) for i in lsp))

    group.add_argument(
        *shortcut,
        action=create_collect_lsp_action(lsp),
        nargs=nargs,
        help=help)

args = parser.parse_args()

with catch_and_die([eval.ActionNotFoundError]):
    lsp = getattr(args, 'lsp', [])
    script = eval.eval(lsp)
    if script:
        script += '\n'  # that '\n' is right
print(script, end='')
