#!/usr/bin/env python3
#
# usage: plash-getscript <ACTIONS>
# Prints the shell script generated from actions passed as command line parameters.
# See insertdoclinkhere for available actions

import argparse

from plashlib import eval, stdlib
from plashlib.utils import catch_and_die, deescalate_sudo, die

# try not to be root
deescalate_sudo()


def create_collect_lsp_action(lsp_begin):
    class CollectLspAction(argparse.Action):
        def __call__(self, parser, namespace, values, option_string=None):
            if not 'lsp' in namespace:
                setattr(namespace, 'lsp', [])
            previous = namespace.lsp
            x = lsp_begin[:]
            x[-1].extend(list(values))
            previous.extend(x)
            setattr(namespace, 'lsp', previous)
    return CollectLspAction

parser = argparse.ArgumentParser()

from inspect import signature
for action, func in eval.state['actions'].items():
    # TODO: find out how many arguments it takes and pass it

    # find out how many arguments the function takes
    sig = signature(func)
    arg_kinds = ([i.kind.name for i in sig.parameters.values()])
    print(action, arg_kinds)
    if 'KEYWORD_ONLY' in arg_kinds or 'VAR_KEYWORD' in arg_kinds:
        die('action may not accept keyword arguments: {}{}'.format(
	    func.__name__, sig))
    if 'VAR_POSITIONAL' in arg_kinds:
        num = '*'
    else:
        num = len(arg_kinds)

    parser.add_argument(
        '--' + action,
	dest='a',
        help=func.__doc__,
        action=create_collect_lsp_action([[action]]),
        nargs=num)

# add the cli shortucuts
group = parser.add_argument_group('shortcuts', 'shortcuts')
for shortcut, lsp, nargs in stdlib.CLI_SHORTCUTS:
    help = 'macro for: `{} <ARGS>`'.format(
        ' '.join('--{}'.format(' '.join(i)) for i in lsp))

    group.add_argument(
        *shortcut,
	action=create_collect_lsp_action(lsp),
	nargs=nargs,
	help=help
	)

args = parser.parse_args()

with catch_and_die([eval.ActionNotFoundError]):
    lsp = getattr(args, 'lsp', [])
    script = eval.eval(lsp)
    if script:
        script += '\n'  # that '\n' is right
print(script, end='')
