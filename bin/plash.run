#!/usr/bin/env python3
# vim: set filetype=python:

import argparse
import atexit
import os
import sys
import tempfile
from os.path import join
from pwd import getpwuid
from subprocess import CalledProcessError, call, check_call

from plash.utils import catch_and_die, deescalate_sudo, die


def delete_line(f, func):
    lines = f.readlines()
    f.seek(0)
    for line in lines:
        if not func(line):
            f.write(line)
    f.truncate()

def add_user(passwd_file, pw_entry):
    passwd = open(join(mountpoint, 'etc/passwd'), 'r+')
    delete_line(
        passwd,
        lambda line: int(line.split(':')[2]) == uid)
    passwd_entry = '{pw_name}:x:{pw_uid}:{pw_gid}:{pw_gecos}:{pw_dir}:/bin/sh'.format(**dict(
        (i, getattr(pw, i)) for i in dir(pw)))
    passwd.write(passwd_entry + '\n')
    passwd.close()


workdir = None
upperdir = None
deescalate = True
try:
    container, *cmd = sys.argv[1:]
    if not cmd:
        cmd = ['printf', '{}\\n'.format(container)]  # a default command
    while True:
        if cmd[0] == '--workdir':
            cmd.pop(0)
            workir = cmd.pop(0)
        elif cmd[0] == '--upperdir':
            cmd.pop(0)
            upperdir = cmd.pop(0)
        elif cmd[0] == '--dont-deescalate':
            cmd.pop(0)
            deescalate = False
        elif cmd[0] == '--':
            cmd.pop(0)
            break
        else:
            break
    if container.startswith('-') or cmd[0].startswith('-'):
        raise ValueError()
except (IndexError, ValueError):
    print(
        'USAGE: run container [--workdir value] [--upperdir value] cmd1 [cmd2 [cmd3 ...]]',
        file=sys.stderr)
    sys.exit(2)

mountpoint = tempfile.mkdtemp(dir='/var/tmp')
exit = call(['plash.mount', container, mountpoint] + ([
    '--workdir', workdir
] if workdir else []) + (['--upperdir', upperdir] if upperdir else []))
if exit:
    sys.exit(exit)

if deescalate:
    uid = int(os.environ.get('SUDO_UID') or os.getuid())
else:
    uid = os.getuid()


pw_entry = getpwuid(uid)
home = pw_entry.pw_dir
add_user(join(mountpoint, '/etc/passwd'), pw_entry)


mounts = ['proc', home, 'sys', 'dev', 'tmp', 'etc/resolv.conf']
mounts_map = dict((m, join(mountpoint, m.lstrip('/'))) for m in mounts)

try:
    os.makedirs(mounts_map[home]) # FIXME: directory access rights, maybe
except FileExistsError:
    pass

with catch_and_die([CalledProcessError]):
    # prepare mounts for container
    check_call(['mount', '--bind', home, mounts_map[home]])
    check_call(['mount', '-t', 'proc', 'proc', mounts_map['proc']])
    check_call(['mount', '--bind', '/sys', mounts_map['sys']])
    check_call(['mount', '--bind', '/dev', mounts_map['dev']])
    check_call(['mount', '-t', 'tmpfs', 'tmpfs', mounts_map['tmp']])
    check_call([
        'mount', '--bind', '/etc/resolv.conf',
        mounts_map['etc/resolv.conf']
    ])

if not os.fork():
    pwd = os.getcwd()
    os.chroot(mountpoint)
    os.chmod('/', 0o755) # not so sure if this here or more to the top
    if deescalate:
        deescalate_sudo()
    try:
        os.chdir(pwd)
    except (ValueError, PermissionError, FileNotFoundError): # TODO: put more exceptions here
        os.chdir("/")
    try:
        os.execvpe(cmd[0], cmd, os.environ)
    except FileNotFoundError:
        die('Command not found: {}'.format(cmd[0]))
_, exit = os.wait()

with catch_and_die([CalledProcessError]):
    for mp in mounts_map.values():
        check_call(['umount', '-l', mp])
    check_call(['umount', '-l', mountpoint])

sys.exit(exit // 256)
