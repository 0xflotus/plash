#!/usr/bin/env python3

# usage: plash-runc container [ARG1 [ARG2 [ARG3 ...]]]
# Run a container with runc.
# See the runc project page: https://github.com/opencontainers/runc

import json
import os
import sys
import tempfile
from os.path import join
from subprocess import CalledProcessError, check_call
from tempfile import mkdtemp
from uuid import uuid4

from plashlib.utils import catch_and_die, die_with_usage, handle_help_flag, handle_build_args, get_default_shell

handle_help_flag()
handle_build_args()


palsh_data = os.environ.get('PLASH_DATA', '/var/lib/plash')

try:
    container, *cmd = sys.argv[1:]
except ValueError:
    die_with_usage()

tmp = tempfile.mkdtemp()
os.chdir(tmp)
os.mkdir('./rootfs')
with catch_and_die([CalledProcessError]):
    check_call(['plash-mount', container, './rootfs'])
    check_call(['runc', 'spec'])

default_shell = get_default_shell(join('./rootfs/etc/passwd'))

with open(join(tmp, 'config.json')) as f:
    bundle = json.loads(f.read())

bundle['hostname'] = container
bundle['process']['args'] = cmd or [default_shell]
bundle.setdefault('hooks', {})
bundle['hooks'].setdefault('poststop', [])
bundle['hooks']['poststop'].append({
    "path": "/bin/umount",
    "args": ['umount', join(tmp, 'rootfs')]
})

with open(join(tmp, 'config.json'), 'w') as f:
    f.write(json.dumps(bundle))

cmd = ['runc', 'run', str(uuid4())]
os.execvpe(cmd[0], cmd, os.environ)
