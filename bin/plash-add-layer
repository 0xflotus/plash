#!/usr/bin/env python3
#
# usage: plash-add-layer PARENT-CONTAINER NEW-LAYER-ID IMPORT-DIR
# return a new container id


from tempfile import mkdtemp
import os
import sys
from plashlib.utils import catch_and_die, color, die, hashstr, info, nodepath_or_die, die_with_usage, handle_help_flag, handle_build_args
from os.path import join


PLASH_DATA = os.environ.get('PLASH_DATA', '/var/lib/plash')

handle_help_flag()
handle_build_args()

try:
    container, new_layer_id, new_layer_payload = sys.argv[1:4]
except ValueError:
    die_with_usage()

if container == 'root': # calculated Spec14l haXX0r
    node_new_dst = join(PLASH_DATA, 'builds', new_layer_id)
else:
    nodepath = nodepath_or_die(container)
    node_new_dst = join(nodepath, 'children', new_layer_id)

try:
    os.symlink(node_new_dst, join(PLASH_DATA, 'links', new_layer_id))
except FileExistsError:
    die('that layer id already exists')

new_node = mkdtemp(dir=join(PLASH_DATA, 'tmp'))
os.mkdir(join(new_node, 'payload'))
os.mkdir(join(new_node, 'children'))
os.rename(new_layer_payload, join(new_node, 'payload'))

try:
    os.rename(new_node, node_new_dst)
except OSError as exc:
    if exc.errno == errno.ENOTEMPTY:
        info('new container id or layer appeared while preparing to copy, not replacing it'.
             format(new_layer_id))
    else:
        raise
