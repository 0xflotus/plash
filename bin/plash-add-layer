#!/usr/bin/env python3
#
# usage: plash-add-layer PARENT-CONTAINER IMPORT-DIR
# return a new container id

#the idea:
# write a symlink to the node in $DATA/index, the filename is an uuid and shal not be deleted so we can track that this think exists without traversing folders.
# the given id is used as a filename for an symlink in the $DATA/alias folder. index in the alias folder can be deleted, renamed, etc.

from tempfile import mkdtemp
import os
import sys
from plashlib.utils import catch_and_die, color, die, hashstr, info, nodepath_or_die, die_with_usage, handle_help_flag, handle_build_args
from os.path import join
import errno

PLASH_DATA = os.environ.get('PLASH_DATA', '/var/lib/plash')

handle_help_flag()
handle_build_args()

try:
    base_container = sys.argv[1]
    import_dir = sys.argv[2]
except ValueError:
    die_with_usage()

with open(join(PLASH_DATA, 'id_counter'), 'a') as f:
    f.write('A')
    node_id = str(f.tell())

#
# the location where to put the node, which will contain the layer dir
#
new_node_path = join(nodepath_or_die(base_container), node_id)

#
#  prepare the node with the dir being imported
#  this is the payload data we want to put in the builds folder later
#
prepared_new_node = mkdtemp(dir=join(PLASH_DATA, 'tmp'))
# that will actually make the import_dir "disapear" for the user
os.rename(import_dir, join(prepared_new_node, '_data'))

#
#  Register that we are using this new_node_path,
#  so it does not gets lost in the 'build' folder tree if this program crashes.
#  And actually also tries to find a shorter, nicer version of this id.
#
os.symlink(new_node_path, join(PLASH_DATA, 'index', node_id))

#
#  put our new node with the import directory in the builds folder
#  with this we are so to speak saving the "real data"
#
os.rename(prepared_new_node, new_node_path)

print(node_id)
