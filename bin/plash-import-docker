#!/usr/bin/env python3
#
# usage: plash-import-docker CONTAINER ALIAS
# Import an image from the docker cloud

import subprocess
import os
import sys
import atexit
from time import sleep
import tempfile
from plashlib.utils import die, catch_and_die, die_with_usage

try:
    pull, image_id = sys.argv[1], sys.argv[2]
except IndexError:
    die_with_usage()

def debug(msg):
    print('==> {}'.format(msg), file=sys.stderr)

with catch_and_die([subprocess.CalledProcessError]):

    debug('ensuring docker is builded')
    subprocess.check_output(['plash-build', '-A', 'docker']) # ensure it is builded showing build logs
    debug('starting docker')
    log = open(tempfile.mkstemp()[1])
    p = subprocess.Popen(['plash-docker-daemon'], stderr=log)
    atexit.register(lambda: p.kill())
    while True:
        daemon_exit = p.poll()
        if daemon_exit is not None:
            die('plash-docker-daemon died with exit status {} (logs at {})'.format(daemon_exit, log.name))
        try:
            subprocess.check_call(['plash-docker', 'info'], stderr=subprocess.DEVNULL, stdout=subprocess.DEVNULL)
        except subprocess.CalledProcessError:
            sleep(1)
        else:
            break
    debug('docker is up')
    debug('pulling image')
    subprocess.check_call(['plash-docker', 'pull', pull], stdout=2) # docker pull shows progress in stdout by default
    debug('pulled')
    container = subprocess.check_output(['plash-docker', 'create', pull, 'sh']).decode().rstrip('\n')
    debug('exporting image into plash')
    docker_export = subprocess.Popen(['plash-docker', 'export', container], stdout=subprocess.PIPE)
    atexit.register(lambda: docker_export.kill())
    subprocess.check_call(['plash-import-tar', '-', image_id], stdin=docker_export.stdout)
