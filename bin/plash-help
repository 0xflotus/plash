#!/usr/bin/env python3

# usage: plash help ( SUBCOMMAND | --usage SUBCOMMAND | --list | -l | --reference | -r )
# Show help

import os
import re
import subprocess
import sys
from os import path
from os.path import join

from plashlib.utils import die_with_usage, handle_help_flag

handle_help_flag()


def print_reference():
      script_dir = os.path.dirname(sys.argv[0])
      for cmd in sorted(os.listdir(script_dir)):
            print()
            print()
            print(cmd)
            print(len(cmd) * '=')
            print()
            subprocess.check_call(['plash-help', cmd])

def print_short():
      script_dir = os.path.dirname(sys.argv[0])
      for cmd in sorted(os.listdir(script_dir)):
            try:
                  cmd_name = cmd.split('-')[1]
            except IndexError:
                  cmd_name = cmd
            out = subprocess.check_output(['plash-help', cmd])
            if out:
                  first_doc_line = out.decode().splitlines()[1]
                  first_sentence = first_doc_line.split('-')[0]
            else:
                  first_sentence = '?'
            print('{:<22} {}'.format(cmd_name, first_sentence))


def print_list():
      script_dir = os.path.dirname(sys.argv[0])
      for cmd in sorted(os.listdir(script_dir)):
            if cmd == 'plash':
                  continue
            out = subprocess.check_output(['plash-help', cmd])
            if not out:
                  usage = '{} ?'.format(cmd.replace('-', ' '))
            else:
                  usage = out.splitlines()[0][7:].decode()
            print(usage.split(' ', 1)[1])

args = sys.argv[1:]

if args == ['--reference'] or args == ['-r']:
      print_reference()
      sys.exit(0)
elif args == ['--list'] or args == ['-l']:
      print_list()
      sys.exit(0)

elif args == ['--short'] or args == ['-s']:
      print_short()
      sys.exit(0)

try:
      arg = args.pop(0)
      usage_flag = '--usage'
      if arg == '--usage':
            usage_flag = True
            arg = args.pop(0)
      else:
            usage_flag = False
except IndexError:
      die_with_usage()

script = sys.argv[0]
script_dir = os.path.dirname(script)

#SECURITY: escape arg somehow
doc = []
arg = os.path.basename(arg)
if not '-' in arg and not arg == 'plash':
      arg = 'plash-{}'.format(arg)
with open(join(script_dir, arg)) as f:
      lines = f.readlines()
      for line in lines:
            if line == '\n' or line.startswith('#!') or line.startswith('# vim:'):
                  continue
            if line.startswith('#'):
                  doc.append(line)
            else:
                  break

if not usage_flag:
      print(''.join(i[2:] for i in doc), end='')
else:
      for line in doc:
            if line.startswith('# usage: '):
                  print(line[2:], end='')
                  break
