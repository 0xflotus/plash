#!/usr/bin/env python3
#
# usage: plash-use program

from plashlib.utils import handle_help_flag, die, die_with_usage, catch_and_die
from subprocess import check_output, check_call, CalledProcessError, DEVNULL
import sys
import shlex
import os

handle_help_flag()

try:
    query = sys.argv[1]
except IndexError:
    die_with_usage()

run_container = 'plash-use-{}'.format(query)

#
# see if we already have the container to run this
#
try:
    check_call(['plash-nodepath', run_container], stdout=DEVNULL, stderr=DEVNULL)
except CalledProcessError as exc:
    if not exc.returncode == 3:
        raise
    print('plash-use: caching {}...'.format(query), file=sys.stderr)
else:
    # short reace condition, it could get deleted in between
    os.execlp('plash-run', 'plash-run', run_container, *sys.argv[1:])

#
# find out the package name for this binary
#
query_container = check_output([
    'plash-build',
    '--os',
    'archlinux:current',
    '--pacman',
    'pkgfile',
    '--run',
    'pkgfile --update',
]) # --rebuild-every xdays with a system upgrade!!
query_container = query_container.decode().strip('\n')
try:
    install_package = check_output(['plash-run', query_container, 'pkgfile', '-bs', query]).decode().splitlines()[0]
except ChildProcessError:
    die('programm {} not found'.format(query))

#
# "install" the package
#
final_container = check_output([
'plash-build',
'--os',
'archlinux:current',
'--pacman',
install_package
])
final_container = final_container.decode().strip('\n')

#
# create a alias for every binary in that package
#
out = check_output(['plash-run', query_container, 'pkgfile', '-bl', install_package])
call_names = [os.path.basename(entry.split('\t')[-1]) for entry in out.decode().splitlines()]
print('{} provides {}'.format(install_package, ' '.join(call_names)))
for call_name in call_names:
    with catch_and_die([OSError]):
        check_call(['plash-alias', final_container, 'plash-use-{}'.format(call_name)])

#
# finally run the program again
#
os.execlp('plash-run', 'plash-run', run_container, '--dont-deescalate', *sys.argv[1:])
