#!/usr/bin/env python3
#
# usage: plash-mount [--upperdir UPPERDIR] [--workdir WORKDIR] CONTAINER MOUNTPOINT
# Mounts the filsystem of a container. To cleanup, unmout it with the `umount` command later.
# The optional arguments are options passed to the overlay filesystem program.
# `upperdir` will include any changes made on the mountpoint, `workdir` is used internally by the overlay programm and must be located in the same file system device than `upperdir`.

import argparse
import os
from os import path
from os.path import basename, join
from subprocess import CalledProcessError, check_output
from sys import exit
from tempfile import mkdtemp

from plashlib.utils import catch_and_die, nodepath_or_die, handle_build_args, handle_help_flag

PLASH_DATA = os.environ.get('PLASH_DATA', '/var/lib/plash')
MOUNT_EXTRA_OPTS = ',nosuid'

handle_help_flag()
handle_build_args()

parser = argparse.ArgumentParser(add_help=False)
parser.add_argument('container')
parser.add_argument('mountpoint')
parser.add_argument('--upperdir')
parser.add_argument('--workdir')
args = parser.parse_args()

nodepath = nodepath_or_die(args.container)


def vid_to_id(last_component):
    for i in range(1, len(last_component)):
        container_id = last_component[:i + 1]
        linkname = join(PLASH_DATA, 'links', container_id)
        try:
            nodepath = os.readlink(linkname)
        except FileNotFoundError:
            pass
        else:
            if basename(nodepath) == last_component:
                return container_id
    raise ValueError('no such container')


# use the symlinks and not the full paths because the arg size is limited
# and this is shorter. on my setup i get 58 layers before an error, we could have multiple mount calls to overcome this
symlinked_layer_paths = []

base = nodepath
while True:
    base, dir = path.split(base)
    if dir == 'children':
        continue
    symlinked_layer_paths.append(join(PLASH_DATA, 'links', vid_to_id(dir)))
    if path.basename(base) == 'builds':
        break

# FIXME: escape ':' ?, escape ','
lowerdir = ':'.join(
        join(p, 'payload').replace(':', r'\:')
        for p in reversed(symlinked_layer_paths))

with catch_and_die([OSError], 'mkdtemp'):
    upperdir = args.upperdir or mkdtemp(dir=join(PLASH_DATA, 'tmp'), prefix='')
    workdir = args.workdir or mkdtemp(dir=join(PLASH_DATA, 'tmp'), prefix='')

os.execlp(
'mount',
'mount',
'-t',
'overlay',
'overlay',
'-o',
'upperdir={upperdir},lowerdir={lowerdir},workdir={workdir}{extra}'.format(
    upperdir=upperdir,
    workdir=workdir,
    lowerdir=lowerdir,
    extra=MOUNT_EXTRA_OPTS),
    args.mountpoint) 
