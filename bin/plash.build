#!/usr/bin/python3
# vim: set filetype=python:

import re
import subprocess
import sys
from subprocess import (DEVNULL, CalledProcessError, Popen, check_call,
                        check_output)

from plash.eval import LAYER_MARKER
from plash.stdlib import OS_HINT_TEMPL
from plash.utils import catch_and_die, die, info, color

try:
    script = check_output(['plash.debug-lsp'] + sys.argv[1:])
    script = script.decode()
except CalledProcessError as exc:
    sys.exit(exc.returncode)

os_re = re.compile(OS_HINT_TEMPL.format('(.+)\n'))
matches = os_re.findall(script)
script = os_re.sub('', script)
try:
    os_hint = matches[0]
except IndexError:
    die('No os specified')

# split the script in its layers
layers = script.split(LAYER_MARKER + '\n')
layers = [l for l in layers if l]

# pull container if it does not exists
try:
    check_call(['plash.nodepath', os_hint], stderr=DEVNULL, stdout=DEVNULL)
except CalledProcessError:
    print('Container not found, trying to pull it', file=sys.stderr)
    try:
        check_call(['plash.import-linuxcontainers', os_hint])
    except CalledProcessError:
        sys.exit(1)

current_container = os_hint
for counter, layer in enumerate(layers):
    p = Popen(['plash.add-layer', current_container], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
    p.stdin.write(layer.encode())
    p.stdin.close()
    exit = p.wait()
    if exit:
        sys.exit(1)
    current_container = p.stdout.read()
    current_container = current_container.decode().strip('\n')

print(current_container)
