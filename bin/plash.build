#!/usr/bin/python3

import subprocess
import sys
from subprocess import CalledProcessError, Popen, check_output, check_call, DEVNULL

from plash.utils import catch_and_die, info

LAYER_MARKER = '### start new layer'
OS_HINT = '### os hint: '


try:
    script = check_output(['plash.debug-lsp'] + sys.argv[1:])
    script = script.decode()[:-1]
except CalledProcessError:
    sys.exit(1)


if script:
    script_lines = script.split('\n')
    layer_maker = script_lines[0]
    layers = (script + '\n').split(LAYER_MARKER + '\n')
    layers = [l for l in layers if l]
else:
    script_lines = []
    layers = []

os_hint = None
for line in script_lines:
    if line.startswith(OS_HINT):
        os_hint = line[len(OS_HINT):]
if os_hint is None:
    die('No os specified')

# pull container if it does not exists
try:
    check_call(['plash.nodepath', os_hint], stderr=DEVNULL, stdout=DEVNULL)
except CalledProcessError:
    print('Container not found, trying to pull it', file=sys.stderr)
    try:
        check_call(['plash.import-linuxcontainers', os_hint])
    except CalledProcessError:
        sys.exit(1)

current_container = os_hint
for counter, layer in enumerate(layers):
    # info('Building layer {}/{}'.format(counter+1, len(layers)))
    p = Popen(['plash.add-layer', current_container], stdout=subprocess.PIPE, stdin=subprocess.PIPE)
    p.stdin.write(layer.encode())
    p.stdin.close()
    exit = p.wait()
    if exit:
        sys.exit(1)
    current_container = p.stdout.read()
    current_container = current_container.decode().strip('\n')

print(current_container)
