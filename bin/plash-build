#!/usr/bin/env python3
#
# usage: plash-build <ACTIONS>
# Builds a container. All command line options are interpreted as action calls from the `stdlib`.
# Consult `plash-getscript --help` for available actions.
#
# Some short examples:
# ```
# plash build -o zesty --run 'touch a'
# plash build -o zesty --run 'touch a' --layer --run 'touch b'
# plash build -o zesty --apt nmap
# ```
#
# exit status:
# 1: Generic error code
# 2: Unrecognized arguments
# 3: Returning container from cache, not building
# 4: Build error - building returned non-zero exit status

import re
import subprocess
import sys
from subprocess import (DEVNULL, CalledProcessError, Popen, check_call,
                        check_output)

from plashlib.eval import LAYER_MARKER
from plashlib.stdlib import OS_HINT_TEMPL
from plashlib.utils import catch_and_die, die, info, color, handle_help_flag

handle_help_flag()

try:
    script = check_output(['plash-getscript'] + sys.argv[1:])
    script = script.decode()
except CalledProcessError as exc:
    sys.exit(exc.returncode)

os_re = re.compile(OS_HINT_TEMPL.format('(.+)\n'))
matches = os_re.findall(script)
script = os_re.sub('', script)
if matches:
    os_hint = matches[-1]
else:
    die('no OS specified')

# split the script in its layers
layers = script.split(LAYER_MARKER + '\n')
layers = [l for l in layers if l]

# pull container if it does not exists
try:
    check_call(['plash-nodepath', os_hint], stderr=DEVNULL, stdout=DEVNULL)
except CalledProcessError:
    print('Container not found, trying to pull it', file=sys.stderr)
    try:
        check_call(['plash-import-cloud', os_hint])
    except CalledProcessError:
        sys.exit(1)

building_happened = False
current_container = os_hint
for counter, layer in enumerate(layers):
    p = Popen(
        ['plash-add-layer', current_container],
        stdout=subprocess.PIPE,
        stdin=subprocess.PIPE)
    p.stdin.write(layer.encode())
    p.stdin.close()
    exit = p.wait()
    if not exit:
        building_happened = True
    elif exit != 3:
        sys.exit(1)
    current_container = p.stdout.read()
    current_container = current_container.decode().strip('\n')
    if building_happened:
        info('--:')

print(current_container)
