#!/usr/bin/env python3
#
# usage: plash-build <ACTIONS>
# Builds a container.
# All command line options are interpreted as action calls from the `stdlib`.
# Consult `plash-getscript --help` for available actions.
#
# Some short examples:
# ```
# plash build -i zesty --run 'touch a'
# plash build -i zesty --run 'touch a' --layer --run 'touch b'
# plash build -i zesty --apt nmap
# ```
#
# exit status:
# 1: Generic error code
# 2: Unrecognized arguments
# 3: Returning container from cache, not building
# 4: Build error - building returned non-zero exit status

import re
import subprocess
import os
import sys
from plashlib.utils import hashstr, get_nodepath, nodepath_or_die
from plashlib import ux
from subprocess import (DEVNULL, CalledProcessError, Popen, check_call,
                        check_output)

from plashlib.eval import LAYER_MARKER
from plashlib.stdlib import IMAGE_HINT_TEMPL
from os.path import join
from plashlib.utils import catch_and_die, die, info, color, handle_help_flag, plash_map
from tempfile import mkdtemp

PLASH_DATA = os.environ.get('PLASH_DATA', '/var/lib/plash')

handle_help_flag()
ux.assert_is_root()
ux.assert_initialized()

try:
    script = check_output(['plash-getscript'] + sys.argv[1:])
except CalledProcessError as exc:
    die("getscript failed with exit {}".format(exc.returncode))
script = script.decode()

image_ir = re.compile(IMAGE_HINT_TEMPL.format('(.+)\n'))
matches = image_ir.findall(script)
script = image_ir.sub('', script)
if matches:
    image_hint = matches[-1]
else:
    die('no image specified')

#
#  convert the image_hint into an container id, also use caching
#
if image_hint.isdigit():
    base_container = image_hint
    nodepath_or_die(base_container)
elif image_hint.startswith('@'):
    base_container = plash_map(image_hint[1:])
    if not base_container:
        die('image map could not be resolved: {}'.format(image_hint))
else:
    if image_hint.startswith('https://') or image_hint.startswith('http://'):
        cmd = ['plash-import-url', image_hint]
    elif image_hint.startswith('/') or image_hint.startswith('./'):
        cmd = ['plash-import-tar', image_hint]
    elif image_hint.startswith('docker://'):
        cmd = ['plash-import-docker', image_hint[9:]]
    else:
        cmd = ['plash-import-lxc', image_hint]
    cache_key = ':'.join(cmd)
    base_container = plash_map(cache_key.encode())
    if not base_container:
        with catch_and_die([CalledProcessError]):
            base_container = check_output(cmd).decode().strip('\n')
        plash_map(cache_key.encode(), base_container)

# split the script in its layers
layers = script.split(LAYER_MARKER + '\n')
layers = [l for l in layers if l]

current_container = base_container
os.environ['PS4'] = color('--> ', 4)
for layer in layers:
    cache_key = hashstr(b':'.join([current_container.encode(),
                                   layer.encode()]))
    next_container = plash_map(cache_key.encode())
    if not next_container:

        # build and cache it
        p = Popen(
            ['plash-create', current_container, 'sh', '-ex'],
            stdin=subprocess.PIPE,
            stdout=subprocess.PIPE,
            cwd='/')
        p.stdin.write(layer.encode())
        p.stdin.close()
        next_container = p.stdout.read().decode().strip('\n')
        exit = p.wait()
        if exit:
            die('build died with exit status: {}'.format(exit))
        plash_map(cache_key.encode(), next_container)
        info('--:')
    current_container = next_container
build_container = current_container

print(current_container)
