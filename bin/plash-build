#!/usr/bin/env python3
#
# usage: plash-build <ACTIONS>
# Builds a container. All command line options are interpreted as action calls from the `stdlib`.
# Consult `plash-getscript --help` for available actions.
#
# Some short examples:
# ```
# plash build -i zesty --run 'touch a'
# plash build -i zesty --run 'touch a' --layer --run 'touch b'
# plash build -i zesty --apt nmap
# ```
#
# exit status:
# 1: Generic error code
# 2: Unrecognized arguments
# 3: Returning container from cache, not building
# 4: Build error - building returned non-zero exit status

import re
import subprocess
import os
import sys
from plashlib.utils import hashstr, get_nodepath, short_alias, nodepath_or_die
from subprocess import (DEVNULL, CalledProcessError, Popen, check_call,
                        check_output)

from plashlib.eval import LAYER_MARKER
from plashlib.stdlib import IMAGE_HINT_TEMPL
from plashlib.utils import catch_and_die, die, info, color, handle_help_flag

PLASH_DATA = os.environ.get('PLASH_DATA', '/var/lib/plash')

handle_help_flag()

try:
    script = check_output(['plash-getscript'] + sys.argv[1:])
    script = script.decode()
except CalledProcessError as exc:
    sys.exit(exc.returncode)

image_ir = re.compile(IMAGE_HINT_TEMPL.format('(.+)\n'))
matches = image_ir.findall(script)
script = image_ir.sub('', script)
if matches:
    image_hint = matches[-1]
else:
    die('no image specified')

# split the script in its layers
layers = script.split(LAYER_MARKER + '\n')
layers = [l for l in layers if l]

# pull container if it does not exists
#try:
#    check_call(['plash-nodepath', image_hint], stderr=DEVNULL, stdout=DEVNULL)
#except CalledProcessError:
with catch_and_die([CalledProcessError]):
    if '://' in image_hint:
        base_container = check_output(['plash-import', image_hint]).decode().strip('\n')
    else:
        nodepath_or_die(image_hint)
        base_container = image_hint

current_container = base_container
os.environ['PS4'] = color('--> ', 4)
for counter, layer in enumerate(layers):
    next_container = hashstr(b':'.join([current_container.encode(), layer.encode()]))
    if not get_nodepath(next_container):
        p = Popen(
            ['plash-create-container', current_container, next_container, 'sh', '-ex'],
            stdin=subprocess.PIPE,
            stdout=2,
            cwd='/')
        p.stdin.write(layer.encode())
        p.stdin.close()
        exit = p.wait()
        if exit:
            die('build died with exit status: {}'.format(exit))
        info('--:')
    current_container = next_container

short_id = short_alias(current_container)
print(short_id)
sys.exit(0)
