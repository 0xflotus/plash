#!/usr/bin/env python3
# vim: set filetype=python:

# usage: plash import-tar TARFILE NEW-CONTAINER-ID
# Create a container from a tar file named by the `new-container-id` parameter.

import errno
import os
import shutil
import sys
import tarfile
from os.path import join
from tempfile import mkdtemp

from plashlib.utils import die, info, handle_help_flag, die_with_usage

handle_help_flag()

try:
    tar_file = sys.argv[1]
    image_id = sys.argv[2]
except IndexError:
    die_with_usage()

PLASH_DATA = os.environ.get('PLASH_DATA', '/var/lib/plash')

image_dir = join(join(PLASH_DATA, 'builds'), image_id)
if os.path.exists(image_dir):
    die('An image with that image id already exists')

tmp_image_dir = mkdtemp(
    dir=join(PLASH_DATA,
             'tmp'))  # must be on same fs than PLASH_DATA for rename to work
os.mkdir(join(tmp_image_dir, 'children'))
# os.mkdir(join(tmp_image_dir, 'payload'))
rootfs = join(tmp_image_dir, 'payload')
if tar_file == '-':
    t = tarfile.open(fileobj=sys.stdin, mode='r|')
else:
    t = tarfile.open(tar_file)
t.extractall(rootfs)

# we want /etc/resolv to not by a symlink or not to not exist - that makes the later mount not work #FIXME: add a layer for that
resolvconf = join(rootfs, 'etc/resolv.conf')
try:
    os.unlink(resolvconf)
except FileNotFoundError:
    pass
with open(resolvconf, 'w') as f:
    f.seek(0)
    f.truncate()

# index the image
try:
    os.symlink(image_dir, join(join(PLASH_DATA, 'links'),
                               image_id))  # absolute symlink!
except FileExistsError:
    pass

try:
    os.rename(tmp_image_dir, image_dir)
except OSError as exc:
    if exc.errno == errno.ENOTEMPTY:
        die('Image id already taken')
    else:
        raise
