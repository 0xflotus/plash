#!/usr/bin/env python3
# vim: set filetype=python:
import atexit
import errno
import os
import shutil
import subprocess
import sys
from os.path import basename, join
from subprocess import (DEVNULL, CalledProcessError, Popen, check_call,
                        check_output)
from sys import exit
from tempfile import mkdtemp

from pyplash.utils import catch_and_die, color, die, hashstr, info

PLASH_DATA = os.environ.get('PLASH_DATA', '/var/lib/plash')

try:
    container = sys.argv[1]
except IndexError:
    print('USAGE: plash.add-layer container', file=sys.stderr)
    sys.exit(2)

cmd = sys.stdin.read()
quiet = False

try:
    node_path = check_output(['plash.nodepath',
                              container]).decode().strip('\n')
except CalledProcessError:
    sys.exit(1)

new_container = hashstr(b':'.join([container.encode(), cmd.encode()]))
final_child_dst = join(
    join(PLASH_DATA, 'builds'), node_path, 'children', new_container)

for i in range(2, len(new_container)):
    short = (new_container[:i + 1])
    linkname = join(PLASH_DATA, 'links', short)
    try:
        os.symlink(final_child_dst, linkname)
    except FileExistsError:
        if os.readlink(
                linkname
        ) == final_child_dst and os.path.exists(final_child_dst):

            # already cached
            print(short)
            sys.exit(3)

    else:
        break

new_child = mkdtemp(dir=join(PLASH_DATA, 'tmp'))
mountpoint = mkdtemp(dir=join(PLASH_DATA, 'tmp'))
new_layer = join(new_child, 'payload')
os.mkdir(new_layer)
os.mkdir(join(new_child, 'children'))

out = 2
ps4 = color('--> ', 4)
p = subprocess.Popen(
    ['plash.run', container, '--upperdir', new_layer, 'sh', '-xe'],
    stderr=out,
    stdout=out,
    stdin=subprocess.PIPE,
    env=dict(os.environ, PS4=ps4),
    preexec_fn=lambda: os.chdir('/'))

p.stdin.write(cmd.encode())
p.stdin.close()

exit = p.wait()

if exit != 0:
    atexit.register(lambda: shutil.rmtree(new_child))
    die("build returned exit status {}".format(exit), exit=4)

try:
    os.rename(new_child, final_child_dst)
except OSError as exc:
    if exc.errno == errno.ENOTEMPTY:
        info('container id or layer appeared while building, not replacing it'.
             format(new_container))
    else:
        raise

print(short)
