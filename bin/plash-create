#!/usr/bin/env python3
#
# usage: plash-create CONTAINER [CMD1 [CMD2 ...]]
# Reads a shell script from stdin and returns a builded or cached container on top of the supplied container.
# The new container is the only thing printed to stdout, building information and status messages are printed to stderr.
# For most cases use `plash build` for a higher level interface.
#
# Exit status:
# Same as `plash build`


import atexit
import errno
import os
import shutil
import subprocess
import sys
from os.path import basename, join
from plashlib import ux
from subprocess import (DEVNULL, CalledProcessError, Popen, check_call,
                        check_output)
from sys import exit
from tempfile import mkdtemp

from plashlib.utils import catch_and_die, color, die, hashstr, info, nodepath_or_die, die_with_usage, handle_help_flag, handle_build_args

PLASH_DATA = os.environ.get('PLASH_DATA', '/var/lib/plash')

ux.assert_initialized()
ux.assert_is_root()

try:
    container = sys.argv[1]
    shell_with_args = sys.argv[2:]
except IndexError:
    die_with_usage()
ux.assert_container_exists(container)
ux.assert_is_root()

if not container:
    die('container arg can not be empty an empty string')

handle_help_flag()
handle_build_args()

nodepath_or_die(container)

upperdir = mkdtemp(dir=join(PLASH_DATA, 'tmp'))
workdir = mkdtemp(dir=join(PLASH_DATA, 'tmp'))
p = subprocess.Popen(
    [
        'plash-run',
         container,
         '--root',
         '--mount',
         '/proc,/dev/pts,/etc/resolv.conf,/home',
         '--upperdir-workdir-pair',
         upperdir,
	 workdir,
        #'plash-runc',
        #container,
        #'--upperdir-workdir-pair',
        #upperdir,
        #workdir,
     ] + list(shell_with_args),
     stdout=2) # redirect stdout to stderr because we need to pass the container id through stdout 

exit = p.wait()
if exit:
    die("build returned exit status {}".format(exit), exit=4)

#with catch_and_die([CalledProcessError]):
    #cont = check_output(['plash-add-layer', container, upperdir]).decode().strip('\n')
    #print(cont)

os.execlp(
'plash-add-layer',
'plash-add-layer',
container,
upperdir
)
